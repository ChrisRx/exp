// Code generated by aliaspkg. DO NOT EDIT.

package context

import (
	"context"
	"time"
)

// This is an alias of https://pkg.go.dev/context#Canceled.
var Canceled = context.Canceled

// This is an alias of https://pkg.go.dev/context#DeadlineExceeded.
var DeadlineExceeded = context.DeadlineExceeded

// This is an alias of https://pkg.go.dev/context#Context.
type Context = context.Context

// This is an alias of https://pkg.go.dev/context#CancelFunc.
type CancelFunc = context.CancelFunc

// This is an alias of https://pkg.go.dev/context#CancelCauseFunc.
type CancelCauseFunc = context.CancelCauseFunc

// This is an alias of https://pkg.go.dev/context#Background.
func Background() Context {
	return context.Background()
}

// This is an alias of https://pkg.go.dev/context#TODO.
func TODO() Context {
	return context.TODO()
}

// This is an alias of https://pkg.go.dev/context#WithCancel.
func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {
	return context.WithCancel(parent)
}

// This is an alias of https://pkg.go.dev/context#WithCancelCause.
func WithCancelCause(parent Context) (ctx Context, cancel CancelCauseFunc) {
	return context.WithCancelCause(parent)
}

// This is an alias of https://pkg.go.dev/context#Cause.
func Cause(c Context) error {
	return context.Cause(c)
}

// This is an alias of https://pkg.go.dev/context#AfterFunc.
func AfterFunc(ctx Context, f func()) (stop func() bool) {
	return context.AfterFunc(ctx, f)
}

// This is an alias of https://pkg.go.dev/context#WithoutCancel.
func WithoutCancel(parent Context) Context {
	return context.WithoutCancel(parent)
}

// This is an alias of https://pkg.go.dev/context#WithDeadline.
func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {
	return context.WithDeadline(parent, d)
}

// This is an alias of https://pkg.go.dev/context#WithDeadlineCause.
func WithDeadlineCause(parent Context, d time.Time, cause error) (Context, CancelFunc) {
	return context.WithDeadlineCause(parent, d, cause)
}

// This is an alias of https://pkg.go.dev/context#WithTimeout.
func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {
	return context.WithTimeout(parent, timeout)
}

// This is an alias of https://pkg.go.dev/context#WithTimeoutCause.
func WithTimeoutCause(parent Context, timeout time.Duration, cause error) (Context, CancelFunc) {
	return context.WithTimeoutCause(parent, timeout, cause)
}

// This is an alias of https://pkg.go.dev/context#WithValue.
func WithValue(parent Context, key, val any) Context {
	return context.WithValue(parent, key, val)
}
